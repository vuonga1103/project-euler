// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1,2,3,5,8,13,21,34,55,89...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


// => find the sums of all even fib nums where no num exceeds 4 mil

// declare a var called fibs, which is an array initialized with 1 and 2;
// find the sum of the last two elems of fibs, while the sum doesn't exceed 4mil, push the sum into fibs
// find the sum of all even elems in the array

// const evenFibonacci = () => {
//   const fibs = [1, 2];
//   while ((fibs[fibs.length - 1] + fibs[fibs.length - 2]) < 4000000) {
//     fibs.push(fibs[fibs.length - 1] + fibs[fibs.length - 2])
//   }

//   return fibs.reduce((sum, num) => { return (num % 2 === 0) ? sum + num : sum }, 0)
// }

const evenFibonacci = () => {
  let filterArr = [];

  let first = 0;
  let second = 1;
  let i = 0;

  while (i < 4000000) {
    i = first + second
    first = second;
    second = i

    if (i % 2 === 0) filterArr.push(i);
  }

  return filterArr.reduce((sum, num) => sum + num)
}

console.log(evenFibonacci())